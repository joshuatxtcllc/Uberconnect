import React, { useState, useEffect } from ‘react’;
import { Truck, MapPin, Clock, CheckCircle, XCircle, Phone } from ‘lucide-react’;

const UberPickupComponent = ({ orderId, customerInfo, onStatusUpdate }) => {
const [pickupStep, setPickupStep] = useState(‘quote’); // quote, confirm, scheduled, tracking
const [quote, setQuote] = useState(null);
const [deliveryInfo, setDeliveryInfo] = useState(null);
const [loading, setLoading] = useState(false);
const [error, setError] = useState(null);
const [pickupDetails, setPickupDetails] = useState({
address: ‘’,
instructions: ‘’,
phone: customerInfo?.phone || ‘’,
itemDescription: ‘Artwork for custom framing’
});

// Get delivery quote
const getQuote = async () => {
setLoading(true);
setError(null);

```
try {
  const response = await fetch('/api/uber/quote', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      pickupAddress: pickupDetails.address,
      customerPhone: pickupDetails.phone
    })
  });
  
  const data = await response.json();
  
  if (data.success) {
    setQuote(data);
    setPickupStep('confirm');
  } else {
    setError(data.error || 'Failed to get quote');
  }
} catch (err) {
  setError('Network error. Please try again.');
} finally {
  setLoading(false);
}
```

};

// Schedule the pickup
const schedulePickup = async () => {
setLoading(true);
setError(null);

```
try {
  const response = await fetch('/api/uber/schedule-pickup', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      orderId,
      customerName: customerInfo?.name || 'Customer',
      customerPhone: pickupDetails.phone,
      pickupAddress: pickupDetails.address,
      pickupInstructions: pickupDetails.instructions,
      itemDescription: pickupDetails.itemDescription
    })
  });
  
  const data = await response.json();
  
  if (data.success) {
    setDeliveryInfo(data);
    setPickupStep('scheduled');
    onStatusUpdate?.('pickup_scheduled', data);
    
    // Start tracking
    setTimeout(() => startTracking(data.deliveryId), 2000);
  } else {
    setError(data.error || 'Failed to schedule pickup');
  }
} catch (err) {
  setError('Network error. Please try again.');
} finally {
  setLoading(false);
}
```

};

// Track delivery status
const startTracking = (deliveryId) => {
const trackDelivery = async () => {
try {
const response = await fetch(`/api/uber/track/${deliveryId}`);
const data = await response.json();

```
    if (data.success) {
      setDeliveryInfo(prev => ({ ...prev, ...data }));
      onStatusUpdate?.('status_update', data);
      
      // Continue tracking if not completed
      if (!['delivered', 'cancelled', 'returned'].includes(data.status)) {
        setTimeout(trackDelivery, 30000); // Check every 30 seconds
      } else {
        setPickupStep('completed');
      }
    }
  } catch (err) {
    console.error('Tracking error:', err);
  }
};

setPickupStep('tracking');
trackDelivery();
```

};

const formatAddress = (address) => {
return address.length > 50 ? address.substring(0, 50) + ‘…’ : address;
};

const getStatusColor = (status) => {
const colors = {
pending: ‘text-yellow-600’,
en_route_to_pickup: ‘text-blue-600’,
at_pickup: ‘text-purple-600’,
picked_up: ‘text-green-600’,
en_route_to_dropoff: ‘text-blue-600’,
delivered: ‘text-green-700’,
cancelled: ‘text-red-600’
};
return colors[status] || ‘text-gray-600’;
};

const getStatusMessage = (status) => {
const messages = {
pending: ‘Pickup request pending’,
en_route_to_pickup: ‘Driver heading to pickup location’,
at_pickup: ‘Driver arrived at pickup location’,
picked_up: ‘Item picked up, heading to shop’,
en_route_to_dropoff: ‘On the way to Jay's Frames’,
delivered: ‘Delivered to Jay's Frames!’,
cancelled: ‘Pickup cancelled’
};
return messages[status] || status;
};

// Quote Step
if (pickupStep === ‘quote’) {
return (
<div className="max-w-md mx-auto bg-white rounded-lg shadow-lg p-6">
<div className="text-center mb-6">
<Truck className="mx-auto h-12 w-12 text-blue-600 mb-3" />
<h3 className="text-xl font-semibold text-gray-900">Schedule Artwork Pickup</h3>
<p className="text-gray-600 mt-2">We’ll send an Uber to collect your artwork</p>
</div>

```
    <div className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Pickup Address
        </label>
        <textarea
          value={pickupDetails.address}
          onChange={(e) => setPickupDetails(prev => ({...prev, address: e.target.value}))}
          placeholder="Enter your full address including apartment/unit number"
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          rows="3"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Phone Number
        </label>
        <input
          type="tel"
          value={pickupDetails.phone}
          onChange={(e) => setPickupDetails(prev => ({...prev, phone: e.target.value}))}
          placeholder="Your phone number"
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Special Instructions (Optional)
        </label>
        <textarea
          value={pickupDetails.instructions}
          onChange={(e) => setPickupDetails(prev => ({...prev, instructions: e.target.value}))}
          placeholder="Buzzer code, gate instructions, etc."
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          rows="2"
        />
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-md p-3">
          <div className="flex">
            <XCircle className="h-5 w-5 text-red-400" />
            <div className="ml-2">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      <button
        onClick={getQuote}
        disabled={loading || !pickupDetails.address.trim() || !pickupDetails.phone.trim()}
        className="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium"
      >
        {loading ? 'Getting Quote...' : 'Get Pickup Quote'}
      </button>
    </div>
  </div>
);
```

}

// Confirmation Step
if (pickupStep === ‘confirm’ && quote) {
return (
<div className="max-w-md mx-auto bg-white rounded-lg shadow-lg p-6">
<div className="text-center mb-6">
<CheckCircle className="mx-auto h-12 w-12 text-green-600 mb-3" />
<h3 className="text-xl font-semibold text-gray-900">Confirm Pickup</h3>
</div>

```
    <div className="space-y-4">
      <div className="bg-gray-50 rounded-lg p-4">
        <div className="flex items-start">
          <MapPin className="h-5 w-5 text-gray-400 mt-0.5 mr-2" />
          <div>
            <p className="text-sm font-medium text-gray-900">Pickup Address</p>
            <p className="text-sm text-gray-600">{formatAddress(pickupDetails.address)}</p>
          </div>
        </div>
      </div>

      <div className="bg-blue-50 rounded-lg p-4">
        <div className="flex justify-between items-center">
          <div>
            <p className="text-sm font-medium text-gray-900">Estimated Cost</p>
            <p className="text-lg font-semibold text-blue-600">
              ${(quote.estimatedFee / 100).toFixed(2)}
            </p>
          </div>
          <div className="text-right">
            <p className="text-sm font-medium text-gray-900">Est. Pickup Time</p>
            <p className="text-sm text-gray-600 flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              {Math.round(quote.estimatedDuration / 60)} min
            </p>
          </div>
        </div>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-md p-3">
          <div className="flex">
            <XCircle className="h-5 w-5 text-red-400" />
            <div className="ml-2">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      <div className="flex space-x-3">
        <button
          onClick={() => setPickupStep('quote')}
          className="flex-1 bg-gray-200 text-gray-800 py-3 px-4 rounded-md hover:bg-gray-300 font-medium"
        >
          Back
        </button>
        <button
          onClick={schedulePickup}
          disabled={loading}
          className="flex-1 bg-green-600 text-white py-3 px-4 rounded-md hover:bg-green-700 disabled:opacity-50 font-medium"
        >
          {loading ? 'Scheduling...' : 'Confirm Pickup'}
        </button>
      </div>
    </div>
  </div>
);
```

}

// Scheduled/Tracking Step
if ((pickupStep === ‘scheduled’ || pickupStep === ‘tracking’) && deliveryInfo) {
return (
<div className="max-w-md mx-auto bg-white rounded-lg shadow-lg p-6">
<div className="text-center mb-6">
<Truck className="mx-auto h-12 w-12 text-blue-600 mb-3" />
<h3 className="text-xl font-semibold text-gray-900">Pickup Scheduled</h3>
<p className="text-gray-600 mt-2">Order #{orderId}</p>
</div>

```
    <div className="space-y-4">
      <div className="bg-blue-50 rounded-lg p-4">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-900">Status</p>
            <p className={`text-sm font-semibold ${getStatusColor(deliveryInfo.status)}`}>
              {getStatusMessage(deliveryInfo.status)}
            </p>
          </div>
          {deliveryInfo.courier && (
            <div className="text-right">
              <p className="text-sm font-medium text-gray-900">Driver</p>
              <p className="text-sm text-gray-600">{deliveryInfo.courier.name}</p>
            </div>
          )}
        </div>
      </div>

      {deliveryInfo.trackingUrl && (
        <a
          href={deliveryInfo.trackingUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="block w-full bg-gray-100 text-center py-3 px-4 rounded-md hover:bg-gray-200 text-gray-700 font-medium"
        >
          Open Uber Tracking
        </a>
      )}

      <div className="bg-green-50 border border-green-200 rounded-md p-3">
        <div className="flex">
          <CheckCircle className="h-5 w-5 text-green-400" />
          <div className="ml-2">
            <p className="text-sm text-green-700">
              You'll receive SMS updates about your pickup status.
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
);
```

}

// Completed Step
if (pickupStep === ‘completed’) {
return (
<div className="max-w-md mx-auto bg-white rounded-lg shadow-lg p-6">
<div className="text-center mb-6">
<CheckCircle className="mx-auto h-12 w-12 text-green-600 mb-3" />
<h3 className="text-xl font-semibold text-gray-900">Pickup Complete!</h3>
<p className="text-gray-600 mt-2">Your artwork has been delivered to Jay’s Frames</p>
</div>

```
    <div className="bg-green-50 rounded-lg p-4">
      <p className="text-sm text-green-700 text-center">
        We'll send you updates as we begin working on your custom frame. 
        You can expect quality checks and progress notifications via SMS and email.
      </p>
    </div>
  </div>
);
```

}

return null;
};

export default UberPickupComponent;
